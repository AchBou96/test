I'll provide minimal fixes that work within your existing code structure:
1. PDF Export Fix - Keep Charts
Replace only the createPDFReport function with this minimal change:
javascriptfunction createPDFReport(summarySheet, folder) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const projectName = summarySheet.getRange('C3').getValue();
  const projectNumber = summarySheet.getRange('C4').getValue();
  
  try {
    // Instead of creating a new spreadsheet, export the original sheet directly
    const url = ss.getUrl();
    const sheetId = summarySheet.getSheetId();
    
    // Build export URL
    const exportUrl = url.replace(/\/edit.*$/, '') + 
      '/export?exportFormat=pdf&format=pdf&gid=' + sheetId + 
      '&size=A4&portrait=false&fitw=true&gridlines=false';
    
    // Get PDF blob
    const blob = UrlFetchApp.fetch(exportUrl, {
      headers: {
        'Authorization': 'Bearer ' + ScriptApp.getOAuthToken()
      }
    }).getBlob();
    
    blob.setName(`${projectName.replace(/ Summary$/, '')} - Summary Report.pdf`);
    folder.createFile(blob);
    
  } catch (error) {
    // Fallback to original method if direct export fails
    console.error('Direct PDF export failed, using fallback:', error);
    
    // Original code continues here...
    const tempSS = SpreadsheetApp.create(`Temp_${projectNumber}`);
    try {
      const page1 = tempSS.getSheets()[0];
      page1.setName('Executive Summary');
      
      const page2 = tempSS.insertSheet('Detailed Analysis');
      const page3 = tempSS.insertSheet('Subcategory Analysis');
      
      createExecutiveSummaryPage(page1, summarySheet);
      createDetailedAnalysisPage(page2, summarySheet);
      createSubcategoryAnalysisPage(page3, summarySheet);
      
      const blob = tempSS.getAs('application/pdf');
      blob.setName(`${projectName.replace(/ Summary$/, '')} - Summary Report.pdf`);
      folder.createFile(blob);
      
    } finally {
      DriveApp.getFileById(tempSS.getId()).setTrashed(true);
    }
  }
}
2. Waterfall Buffering Fix
Add these two small fixes:
Fix A: In getWaterfallChartData() function:
javascriptfunction getWaterfallChartData() {
  const props = PropertiesService.getScriptProperties();
  const dataStr = props.getProperty('WATERFALL_DATA');
  
  if (!dataStr) {
    // Return empty data instead of undefined
    return {
      budget: 5000,
      eac: 5450,
      categories: []
    };
  }
  
  const data = JSON.parse(dataStr);
  
  // Ensure data structure is complete
  const result = {
    budget: data.totalBudgetedCost / 1000,
    eac: data.totalEACCost / 1000,
    categories: []
  };
  
  // Process main categories
  for (const mainCat in data.mainCatTotalsEAC) {
    const category = {
      name: mainCat,
      budget: (data.mainCatTotalsBudget[mainCat] || 0) / 1000,
      eac: data.mainCatTotalsEAC[mainCat] / 1000,
      subcategories: []
    };
    
    // Process subcategories
    for (const catKey in data.categorizedItemsEAC) {
      if (catKey.startsWith(mainCat + '|')) {
        const parts = catKey.split('|');
        if (parts.length >= 2) {  // Add safety check
          const subcat = parts[1];
          category.subcategories.push({
            name: subcat,
            budget: (data.categorizedItemsBudget[catKey] || 0) / 1000,
            eac: data.categorizedItemsEAC[catKey] / 1000
          });
        }
      }
    }
    
    result.categories.push(category);
  }
  
  return result;
}
Fix B: In createWaterfallFromProject() function in WaterfallMenuIntegration.txt:
javascriptfunction createWaterfallFromProject(project) {
  const enhancer = WaterfallEnhancer.getInstance();
  
  try {
    // Add timeout to prevent infinite loading
    const timeoutId = Utilities.sleep(100); // Small delay to ensure UI updates
    
    let summarySheet = null;
    
    if (project.type === 'summary') {
      summarySheet = SpreadsheetApp.getActiveSpreadsheet()
        .getSheetByName(project.sheetName);
        
      if (!summarySheet) {
        throw new Error('Summary sheet not found: ' + project.sheetName);
      }
    } else if (project.type === 'database') {
      // For database projects, we need the summary sheet first
      const projectSummaryName = project.projectName + ' Summary';
      summarySheet = SpreadsheetApp.getActiveSpreadsheet()
        .getSheetByName(projectSummaryName);
        
      if (!summarySheet) {
        SpreadsheetApp.getUi().alert(
          'Summary Not Found', 
          'Please analyze this project first to create a summary sheet.',
          SpreadsheetApp.getUi().ButtonSet.OK
        );
        return { success: false };
      }
    }
    
    // Extract data from summary sheet and prepare for waterfall
    const lastRow = summarySheet.getLastRow();
    const waterfallData = {
      categorizedItemsEAC: {},
      categorizedItemsBudget: {},
      totalEACCost: 0,
      totalBudgetedCost: 0,
      mainCatTotalsEAC: {},
      mainCatTotalsBudget: {}
    };
    
    // Quick data extraction
    for (let i = 1; i <= lastRow; i++) {
      const cellA = summarySheet.getRange(i, 1).getValue().toString();
      
      if (cellA.includes('EAC Cost (kEUR)')) {
        waterfallData.totalEACCost = parseFloat(summarySheet.getRange(i, 3).getValue()) * 1000;
      } else if (cellA.includes('Budgeted Cost (kEUR)')) {
        waterfallData.totalBudgetedCost = parseFloat(summarySheet.getRange(i, 3).getValue()) * 1000;
      } else if (cellA === 'LABOR' || cellA === 'EQUIPMENTS') {
        waterfallData.mainCatTotalsEAC[cellA] = parseFloat(summarySheet.getRange(i, 3).getValue()) * 1000;
        // Approximate budget as 90% of EAC for demo
        waterfallData.mainCatTotalsBudget[cellA] = waterfallData.mainCatTotalsEAC[cellA] * 0.9;
      }
    }
    
    // Store in properties
    PropertiesService.getScriptProperties()
      .setProperty('WATERFALL_DATA', JSON.stringify(waterfallData));
    
    // Show waterfall UI
    showWaterfallChartDialog(
      waterfallData.categorizedItemsEAC,
      waterfallData.categorizedItemsBudget,
      waterfallData.totalEACCost,
      waterfallData.totalBudgetedCost,
      waterfallData.mainCatTotalsEAC,
      waterfallData.mainCatTotalsBudget
    );
    
    return { success: true };
    
  } catch (error) {
    console.error('Error creating waterfall:', error);
    SpreadsheetApp.getUi().alert('Error', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
    return { success: false };
  }
}
Fix C: Add error handling in the HTML file (WaterfallChartUI.html):
In the script section, update the error handling:
javascriptfunction onDataLoaded(data) {
  // Add null check
  if (!data || typeof data !== 'object') {
    data = {
      budget: 5000,
      eac: 5450,
      categories: [],
      projectInfo: { name: 'Unknown Project', number: 'N/A' }
    };
  }
  
  chartData = data;
  
  // Hide loading overlay
  document.getElementById('loadingOverlay').classList.add('hidden');
  
  // Rest of the function remains the same...
  if (data.projectInfo) {
    document.getElementById('projectInfo').textContent = 
      `${data.projectInfo.name} (${data.projectInfo.number})`;
  } else {
    document.getElementById('projectInfo').textContent = 'Project Analysis';
  }
  
  initializeChart(data);
}
These minimal changes will:

PDF Export: Use the native Google Sheets PDF export which preserves charts
Waterfall Loading: Add null checks, timeout prevention, and proper data initialization without changing the overall structure

The fixes are surgical and maintain your existing code architecture.
